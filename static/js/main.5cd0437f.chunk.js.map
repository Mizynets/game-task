{"version":3,"sources":["container/GamePage/index.module.css","components/LeaderList/index.module.css","components/LeaderListItem/index.module.css","components/GameInterface/index.module.css","components/UI/Spinner/index.module.css","components/FieldList/index.module.css","components/FieldList/FieldList.js","components/GameInterface/GameInterface.js","components/LeaderListItem/LeaderListItem.js","components/LeaderList/LeaderList.js","components/LeaderBoard/LeaderBoard.js","reduxStore/actionCreater.js","reduxStore/constants.js","components/UI/Spinner/Spinner.js","container/GamePage/GamePage.js","App.js","serviceWorker.js","reduxStore/reducer.js","reduxStore/store.js","index.js"],"names":["module","exports","FieldList","createClasses","selectValue","fieldSizeList","s","item_basis_5","item_basis_10","item_basis_15","this","props","propertiesList","isUserSelected","isSelected","isComputerSelected","selectedUser","classes","listItem","map","el","indx","onClick","data-id","key","uid","className","item","style","background","fieldList","list","Component","GameInterface","inputName","handleChangeSelect","handleChangeInputName","onHandlePlay","gameMode","startGame","winnerMassage","buttonValue","disabledBtn","length","trim","gameInterface","actionBlock","select","value","onChange","defaultValue","easyMode","field","normalMode","hardMode","type","placeholder","disabled","btn","message","messageText","LeaderListItem","name","date","leaderListItem","itemText","LeaderList","leaderList","title","LeaderBoard","fetchError","err","payload","Spinner","loader","GamePage","state","winner","gameOver","randomArr","propertiesItemArr","resetGame","leader","i","createItemPropertiesArr","arrProperties","Array","Math","pow","fill","id","isCurrentUserSelected","setState","componentDidMount","thunkCreaterGetModes","componentDidUpdate","_","prevState","e","target","delay","getDelay","len","getRandomArr","setTimeout","selectedCell","isCurrentUserSelectedChecker","isComputerSelectedChecker","isSelectedChecker","createLeaderList","leaderTemp","JSON","stringify","Date","toLocaleString","prevProps","modeValue","arrLength","array","sort","random","stopGame","winUser","filter","winComputer","floor","cloneArr","timer","selectedComputer","selectedItemID","currentTarget","dataset","findIndex","clearTimeout","thunkCreaterPostWinner","data","selectedIndex","loading","spinner","gamePagePosition","gamePage","leaderBoard","mapDispatchToProps","dispatch","axios","get","then","response","catch","winnerObj","post","connect","App","Boolean","window","location","hostname","match","initialState","reducer","store","createStore","applyMiddleware","thunk","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.5cd0437f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"gamePagePosition\":\"GamePage_gamePagePosition__2IBJI\",\"spinner\":\"GamePage_spinner__JtBXH\",\"gamePage\":\"GamePage_gamePage__1z6kX\",\"gameInterface\":\"GamePage_gameInterface__27DMK\",\"leaderBoard\":\"GamePage_leaderBoard__3E1Q8\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leaderList\":\"LeaderList_leaderList__3x3h5\",\"list\":\"LeaderList_list__2SgrW\",\"item\":\"LeaderList_item__2Xw1h\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"leaderListItem\":\"LeaderListItem_leaderListItem__1XS4v\",\"itemText\":\"LeaderListItem_itemText__3Luxi\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"gameInterface\":\"GameInterface_gameInterface__1VzE9\",\"actionBlock\":\"GameInterface_actionBlock__2ADmr\",\"select\":\"GameInterface_select__2idNh\",\"inputName\":\"GameInterface_inputName__2xh-4\",\"btn\":\"GameInterface_btn__2buLp\",\"messageText\":\"GameInterface_messageText__3Ylop\",\"message\":\"GameInterface_message__2sVxg\",\"fieldList\":\"GameInterface_fieldList__35dVk\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"loader\":\"Spinner_loader__2FPad\",\"load6\":\"Spinner_load6__17uPi\",\"round\":\"Spinner_round__1z0Re\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"list\":\"FieldList_list__2KJcx\",\"initialItem\":\"FieldList_initialItem__14Ybm\",\"item\":\"FieldList_item__2XoUw\",\"item_basis_5\":\"FieldList_item_basis_5__G5m2J\",\"item_basis_10\":\"FieldList_item_basis_10__3gZrt\",\"item_basis_15\":\"FieldList_item_basis_15__1WJCf\"};","import React, { Component } from \"react\";\r\nimport s from \"./index.module.css\";\r\nimport uid from \"uid\";\r\n\r\nclass FieldList extends Component {\r\n  \r\n  createClasses = (selectValue) => {\r\n    const fieldSizeList = +selectValue;\r\n    return fieldSizeList === 5\r\n        ? `${s.item_basis_5}`\r\n        : fieldSizeList === 10\r\n        ? `${s.item_basis_10}`\r\n        : fieldSizeList === 15\r\n        ? `${s.item_basis_15}`\r\n        : null;\r\n  } \r\n\r\nrender() {\r\n    const {\r\n      propertiesList,\r\n      selectValue,\r\n      isUserSelected,\r\n      isSelected,\r\n      isComputerSelected,\r\n      selectedUser,\r\n    } = this.props;\r\n\r\n    \r\n    const classes = this.createClasses(selectValue);\r\n\r\n    const listItem = (\r\n      propertiesList.map((el, indx) => {\r\n        return (\r\n          <li\r\n            onClick={selectedUser}\r\n            data-id={indx}\r\n            key={uid()}\r\n            className={`${s.item} ${classes}`}\r\n            style={{\r\n              background: isUserSelected(el)\r\n                ? \"forestgreen\"\r\n                : isComputerSelected(el)\r\n                ? \"red\"\r\n                : isSelected(el)\r\n                ? \"gray\"\r\n                : \"white\"\r\n            }}\r\n          >\r\n          </li>\r\n        );\r\n      })\r\n    ) \r\n\r\n    return (\r\n      <div className={s.fieldList}>\r\n        <ul className={s.list}>{listItem}</ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default FieldList;\r\n","import React, { Component } from \"react\";\r\nimport s from \"./index.module.css\";\r\nimport FieldList from \"../FieldList\";\r\n\r\nclass GameInterface extends Component {\r\n  render() {\r\n    const {\r\n      selectValue,\r\n      propertiesList,\r\n      inputName,\r\n      handleChangeSelect,\r\n      handleChangeInputName,\r\n      onHandlePlay,\r\n      gameMode,\r\n      startGame,\r\n      isUserSelected,\r\n      isSelected,\r\n      isComputerSelected,\r\n      selectedUser,\r\n      winnerMassage,\r\n      buttonValue\r\n    } = this.props;\r\n    const disabledBtn = (!(selectValue.length > 0 && inputName.trim().length > 0)) || (!(!(selectValue.length > 0 && inputName.trim().length > 0)) && startGame);\r\n    return (\r\n      <div className={s.gameInterface}>\r\n        <div className={s.actionBlock}>\r\n          <select\r\n            className={s.select}\r\n            value={selectValue}\r\n            onChange={handleChangeSelect}\r\n          >\r\n            <option defaultValue>Pick game mode</option>\r\n            <option value={gameMode.easyMode.field}>Easy Mode</option>\r\n            <option value={gameMode.normalMode.field}>Normal Mode</option>\r\n            <option value={gameMode.hardMode.field}>Hard Mode</option>\r\n          </select>\r\n          <input\r\n            className={s.inputName}\r\n            type=\"text\"\r\n            placeholder=\"Enter your name\"\r\n            value={inputName}\r\n            onChange={handleChangeInputName}\r\n          />\r\n          <button\r\n            disabled={disabledBtn}\r\n            className={s.btn}\r\n            onClick={onHandlePlay}\r\n          >\r\n            {buttonValue}\r\n          </button>\r\n        </div>\r\n\r\n        <div className={s.message}>\r\n          <p className={s.messageText}>{winnerMassage}</p>\r\n        </div>\r\n\r\n        <div className={s.fieldList}>\r\n          <FieldList\r\n            propertiesList={propertiesList}\r\n            selectValue={selectValue}\r\n            isUserSelected={isUserSelected}\r\n            isSelected={isSelected}\r\n            isComputerSelected={isComputerSelected}\r\n            selectedUser={selectedUser}\r\n          />\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default GameInterface;\r\n","import React from 'react';\r\nimport s from './index.module.css';\r\n\r\nconst LeaderListItem = ({name, date}) => {\r\n    return(\r\n        <div className={s.leaderListItem}>\r\n            <span className={s.itemText}>{name}</span>\r\n            <span className={s.itemText}>{date}</span>\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeaderListItem;","import React from 'react';\r\nimport s from './index.module.css';\r\nimport LeaderListItem from '../LeaderListItem';\r\nimport uid from \"uid\";\r\n\r\nconst LeaderList = ({list}) => {\r\n\r\n    const leaderList = list.length\r\n    ? list.map(el => {\r\n        const { name, date } = el\r\n        return <li key={uid()} className={s.item}><LeaderListItem name={name} date={date}/></li>\r\n    }) \r\n    : []\r\n  \r\n    return(\r\n        <div className={s.leaderList}>\r\n            <h2 className={s.title} >Leader Board</h2>\r\n            <ul className={s.list}>\r\n                 {leaderList}\r\n            </ul>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default LeaderList;","import React from 'react';\r\nimport s from './index.module.css';\r\nimport LeaderList from '../LeaderList';\r\n\r\nconst LeaderBoard = ({list}) => {\r\n    return(\r\n        <div className={s.LeaderBoard}>\r\n            <LeaderList list={list} />\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default LeaderBoard;","import axios from 'axios';\r\nimport { FETCH_MODES, FETCH_LOADED, FETCH_ERROR, POST_WINNER } from './constants';\r\n\r\nexport const fetchModes = (data) =>{\r\n    return {\r\n        type: FETCH_MODES,\r\n        payload: data,\r\n    }\r\n};\r\n\r\n// fetchData => fetchSuccess || fetchError\r\n\r\nexport const fetchLoaded = () => {\r\n    return {\r\n        type: FETCH_LOADED,\r\n    }\r\n};\r\n\r\nexport const fetchError = (err) => {\r\n    return {\r\n         type: FETCH_ERROR,\r\n         payload: err,\r\n    }\r\n};\r\n\r\nexport const postWinner = () => {\r\n    return{\r\n        type: POST_WINNER,\r\n    }\r\n}\r\n\r\nexport const thunkCreaterGetModes = () => (dispatch) => {\r\n    dispatch(fetchLoaded());\r\n    axios.get(\"http://starnavi-frontend-test-task.herokuapp.com/game-settings\")\r\n    .then(response => dispatch(fetchModes(response.data)))\r\n    .catch(err => dispatch(fetchError(err)));\r\n}\r\n\r\nexport const thunkCreaterPostWinner = (winnerObj) => (dispatch) => {\r\n    dispatch(fetchLoaded());\r\n    axios\r\n    .post(\"http://starnavi-frontend-test-task.herokuapp.com/winners\", winnerObj)\r\n    .then(response => dispatch(postWinner()))\r\n    .catch(err => dispatch(fetchError(err)));\r\n}\r\n","export const FETCH_MODES = \"FETCH_MODES\";\r\nexport const FETCH_LOADED = \"FETCH_LOADED\";\r\nexport const FETCH_ERROR = \"FETCH_ERROR\";\r\nexport const POST_WINNER = \"POST_WINNER\";\r\n","import React from \"react\";\r\nimport s from \"./index.module.css\"\r\nconst Spinner = () => {\r\n    return <div className={s.loader}></div>\r\n}\r\n\r\nexport default Spinner;","import React, { Component } from \"react\";\r\nimport s from \"./index.module.css\";\r\nimport GameInterface from \"../../components/GameInterface/GameInterface\";\r\nimport LeaderBoard from \"../../components/LeaderBoard\";\r\nimport { connect } from \"react-redux\";\r\nimport { thunkCreaterGetModes, thunkCreaterPostWinner } from \"../../reduxStore/actionCreater\";\r\nimport uid from \"uid\";\r\nimport Spinner from \"../../components/UI/Spinner\";\r\n\r\n\r\nclass GamePage extends Component {\r\n  state = {\r\n    inputName: \"\",\r\n    selectValue: \"\",\r\n    winner: \"\",\r\n    startGame: false,\r\n    gameOver: false,\r\n    randomArr: null,\r\n    propertiesItemArr: [],\r\n    resetGame: false,\r\n    leader: [],\r\n  };\r\n  \r\n  i = 0;\r\n  timer;\r\n  timerStartSelected;\r\n\r\n  createItemPropertiesArr = () => {\r\n    const { selectValue } = this.state;\r\n    const fieldSizeList = +selectValue;\r\n   \r\n    const arrProperties = fieldSizeList\r\n      ? Array(Math.pow(fieldSizeList, 2))\r\n          .fill()\r\n          .map(() => ({\r\n            id: uid(),\r\n            isSelected: false,\r\n            isCurrentUserSelected: false,\r\n            isComputerSelected: false\r\n          }))\r\n      : [];\r\n\r\n    this.setState({\r\n      propertiesItemArr: arrProperties\r\n    });\r\n  };\r\n\r\n  componentDidMount = () => {\r\n    const { thunkCreaterGetModes } = this.props;\r\n    thunkCreaterGetModes();\r\n    this.createItemPropertiesArr();\r\n  };\r\n\r\n  componentDidUpdate = (_, prevState) => {\r\n    if (prevState.selectValue !== this.state.selectValue) {\r\n      this.createItemPropertiesArr();\r\n    } else if (prevState.gameOver !== this.state.gameOver) {\r\n      this.setState({\r\n        resetGame: true\r\n      });\r\n    }\r\n  };\r\n\r\n  handleChangeInputName = e =>\r\n    this.setState({\r\n      inputName: e.target.value\r\n    });\r\n\r\n  handleChangeSelect = e =>\r\n    this.setState({\r\n      selectValue: e.target.value\r\n    });\r\n\r\n  onHandlePlay = () => {\r\n    const { resetGame, gameOver, selectValue } = this.state;\r\n    if (resetGame) {\r\n      this.i = 0;\r\n      this.setState(\r\n        {\r\n          inputName: \"\",\r\n          selectValue: \"\",\r\n          gameOver: false,\r\n          randomArr: null,\r\n          propertiesItemArr: [],\r\n          resetGame: false,\r\n          startGame: false,\r\n        })\r\n      \r\n    }\r\n    if (!gameOver) {\r\n    this.setState({startGame: true})    \r\n\r\n        const delay = this.getDelay(selectValue);\r\n        const len = Math.pow(+selectValue, 2);\r\n        this.getRandomArr(len);\r\n        setTimeout(this.selectedCell, delay);\r\n    }\r\n  };\r\n\r\n  isCurrentUserSelectedChecker = item => item.isCurrentUserSelected;\r\n  isComputerSelectedChecker = item => item.isComputerSelected;\r\n  isSelectedChecker = item => item.isSelected;\r\n\r\n  createLeaderList = () => {\r\n    const { winner } = this.state;\r\n    const obj = {\r\n        name: winner,\r\n        date: JSON.stringify(new Date().toLocaleString()),\r\n    }\r\n    const leaderTemp = [obj];\r\n\r\n    this.setState((prevProps) => {\r\n      return{\r\n        leader: [...leaderTemp, ...prevProps.leader],\r\n      }\r\n    })\r\n}\r\n\r\n  getDelay = (selectValue) => {\r\n    const { gameMode } = this.props;\r\n    const modeValue = +selectValue;\r\n\r\n    return  modeValue === 5\r\n        ? gameMode.easyMode.delay\r\n        : modeValue === 10\r\n        ? gameMode.normalMode.delay\r\n        : modeValue === 15\r\n        ? gameMode.hardMode.delay\r\n        : null;\r\n  }\r\n\r\n  getRandomArr = arrLength => {\r\n    const { randomArr } = this.state;\r\n    const array = Array(arrLength)\r\n      .fill()\r\n      .map((_, i) => i);\r\n    if (!randomArr) {\r\n      this.setState({\r\n        randomArr: array.sort(() => Math.random() - 0.5),\r\n      });\r\n    }\r\n  };\r\n\r\n  stopGame = () => {\r\n    const { propertiesItemArr, inputName } = this.state;\r\n\r\n    const winUser = propertiesItemArr.filter(el => el.isCurrentUserSelected);\r\n    const winComputer = propertiesItemArr.filter(el => el.isComputerSelected);\r\n    \r\n    let winner = null;\r\n    let gameOver = false;\r\n    \r\n    if (winUser.length > Math.floor(propertiesItemArr.length / 2)) {\r\n      winner = inputName;\r\n      gameOver = true;\r\n    }\r\n    else if (winComputer.length > Math.floor(propertiesItemArr.length / 2)){\r\n      winner = \"computer\";\r\n      gameOver = true\r\n    }\r\n    \r\n   gameOver && this.setState({\r\n        gameOver: gameOver,\r\n        winner: winner,\r\n        startGame: false,\r\n      });\r\n  };\r\n\r\n  selectedCell = () => {\r\n    const { propertiesItemArr, randomArr, selectValue, gameOver } = this.state;\r\n    this.stopGame();\r\n    if (!gameOver) {\r\n      const delay = this.getDelay(selectValue);\r\n      const cloneArr = [...propertiesItemArr];\r\n      const ind = this.i++;\r\n      cloneArr[randomArr[ind]].isSelected = true;\r\n      this.setState({\r\n        propertiesItemArr: cloneArr\r\n      });\r\n      this.timer = setTimeout(this.selectedComputer, delay);\r\n    }\r\n  };\r\n\r\n  selectedUser = e => {\r\n    const { propertiesItemArr, selectValue, gameOver } = this.state;\r\n    this.stopGame();\r\n    if (!gameOver) {\r\n    const delay = this.getDelay(selectValue); \r\n    const selectedItemID = e.currentTarget.dataset.id;\r\n    const cloneArr = [...propertiesItemArr];\r\n\r\n    const selectedIndex = cloneArr.findIndex(\r\n      e => e.isSelected && !e.isCurrentUserSelected && !e.isComputerSelected\r\n    );\r\n\r\n    if(selectedIndex === +selectedItemID){\r\n    clearTimeout(this.timer);\r\n      cloneArr[selectedItemID].isCurrentUserSelected = true;\r\n      this.setState({\r\n        propertiesItemArr: cloneArr\r\n      });\r\n      setTimeout(this.selectedCell, delay);\r\n    } \r\n    }  \r\n  };\r\n\r\n  selectedComputer = () => {\r\n    const { propertiesItemArr, selectValue, gameOver, inputName, winner } = this.state;\r\n    const { thunkCreaterPostWinner } = this.props;\r\n    this.stopGame();\r\n    \r\n    if (gameOver) {\r\n      this.createLeaderList();\r\n      winner === inputName \r\n      ? thunkCreaterPostWinner(JSON.stringify({winner: inputName, data: new Date()}))    \r\n      : thunkCreaterPostWinner(JSON.stringify({winner: \"computer\", data: new Date()}));\r\n    }\r\n    const delay = this.getDelay(selectValue);\r\n    const cloneArr = [...propertiesItemArr];\r\n    const selectedIndex = cloneArr.findIndex(\r\n      e => e.isSelected && !e.isCurrentUserSelected && !e.isComputerSelected\r\n    );\r\n    cloneArr[selectedIndex].isComputerSelected = true;\r\n    this.setState({\r\n      propertiesItemArr: cloneArr\r\n    });\r\n    setTimeout(this.selectedCell, delay);\r\n      \r\n    \r\n  };\r\n\r\n  render() {\r\n    const {\r\n      inputName,\r\n      selectValue,\r\n      startGame,\r\n      propertiesItemArr,\r\n      gameOver,\r\n      leader,\r\n    } = this.state;\r\n    const { loading, gameMode } = this.props;\r\n\r\n    if (loading) {\r\n      return <div className={s.spinner}>\r\n        <Spinner />\r\n      </div>\r\n    }\r\n\r\n    const winUser = propertiesItemArr.filter(el => el.isCurrentUserSelected);\r\n    const winComputer = propertiesItemArr.filter(el => el.isComputerSelected);\r\n\r\n    const winnerMassage =\r\n      winUser.length > Math.floor(propertiesItemArr.length / 2)\r\n        ? `${inputName} Win`\r\n        : winComputer.length > Math.floor(propertiesItemArr.length / 2)\r\n        ? `Computer Win`\r\n        : (propertiesItemArr.length === 0 || inputName.length === 0)\r\n        ? `Inputs should be full`\r\n        : `Game`\r\n\r\n    const buttonValue = gameOver ? \"PLAY AGAIN\" : \"PLAY\";\r\n\r\n    return (\r\n      <div className={s.gamePagePosition}>\r\n        <div className={s.gamePage}>\r\n          <div className={s.gameInterface}>\r\n            <GameInterface\r\n              inputName={inputName}\r\n              propertiesList={propertiesItemArr}\r\n              selectValue={selectValue}\r\n              gameMode={gameMode}\r\n              handleChangeSelect={this.handleChangeSelect}\r\n              handleChangeInputName={this.handleChangeInputName}\r\n              onHandlePlay={this.onHandlePlay}\r\n              startGame={startGame}\r\n              isUserSelected={this.isCurrentUserSelectedChecker}\r\n              isSelected={this.isSelectedChecker}\r\n              isComputerSelected={this.isComputerSelectedChecker}\r\n              selectedUser={this.selectedUser}\r\n              winnerMassage={winnerMassage}\r\n              buttonValue={buttonValue}\r\n            />\r\n          </div>\r\n          <div className={s.leaderBoard}>\r\n            <LeaderBoard\r\n              list={leader}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\n\r\nconst mapStateToProps = ({ loading, gameMode }) => {\r\n  return {\r\n    loading,\r\n    gameMode\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = {\r\n  thunkCreaterGetModes,\r\n  thunkCreaterPostWinner\r\n};\r\n\r\nexport default connect(\r\n  mapStateToProps,\r\n  mapDispatchToProps\r\n)(GamePage);\r\n","import React from \"react\";\nimport GamePage from \"./container/GamePage/GamePage\";\n\nconst App = () => {\n    return <GamePage />;\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { FETCH_MODES, FETCH_LOADED, FETCH_ERROR,POST_WINNER } from \"./constants\";\r\n\r\nconst initialState = {\r\n  gameMode: null,\r\n  loading: true,\r\n  err: null,\r\n};\r\n\r\nconst reducer = (state = initialState, { type, payload }) => {\r\n  switch (type) {\r\n    case FETCH_LOADED:\r\n      return {\r\n        ...state,\r\n        loading: true\r\n      };\r\n\r\n    case FETCH_ERROR:\r\n      return {\r\n        gameMode: null,\r\n        loading: false,\r\n        err: payload\r\n      };\r\n\r\n    case FETCH_MODES:\r\n      return {\r\n        ...state,\r\n        gameMode: payload,\r\n        loading: false,\r\n      };\r\n\r\n      case POST_WINNER:\r\n        return {\r\n          ...state,\r\n          loading: false,\r\n        }\r\n  \r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default reducer;\r\n","import { createStore, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\nimport reducer from './reducer';\r\n\r\nconst store = createStore(reducer, applyMiddleware(thunk));\r\n\r\nexport default store;","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport { Provider } from \"react-redux\";\nimport store from \"./reduxStore/store\";\n\nReactDOM.render(\n  <Provider store={store}>\n    <App />\n  </Provider>,\n  document.getElementById(\"root\")\n);\n\nserviceWorker.unregister();\n"],"sourceRoot":""}